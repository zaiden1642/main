document.addEventListener('DOMContentLoaded', function () {
  // Get the canvas element and its context
  const canvas = document.getElementById('snowfallCanvas');
  const ctx = canvas.getContext('2d');

  // Set canvas size to cover the entire window
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  // Function to generate random number within a range
  function getRandom(min, max) {
    return Math.random() * (max - min) + min;
  }

  // Array to store snowflakes
  const snowflakes = [];

  // Create snowflake class
  class Snowflake {
    constructor() {
      this.x = getRandom(0, canvas.width);
      this.y = getRandom(0, canvas.height);
      this.radius = getRandom(1, 3);
      this.speed = getRandom(1, 3);
      this.angle = getRandom(0, 2 * Math.PI);
      this.opacity = 1; // Initial opacity
    }

    // Method to update snowflake position and opacity
    update() {
      this.y += this.speed;
      this.x += Math.sin(this.angle) * 0.5;

      // Reduce opacity over time
      this.opacity -= 0.002;

      // Reset snowflake position and opacity if it goes out of bounds or fades away
      if (this.y > canvas.height || this.opacity <= 0) {
        this.y = 0;
        this.opacity = 1;
      }
    }

    // Method to draw the snowflake
    draw() {
      ctx.globalAlpha = this.opacity; // Set the global alpha for fading effect
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
      ctx.fillStyle = 'white';
      ctx.fill();
      ctx.closePath();
      ctx.globalAlpha = 1; // Reset global alpha after drawing
    }
  }

  // Function to create snowflakes
  function createSnowflakes() {
    for (let i = 0; i < 100; i++) {
      snowflakes.push(new Snowflake());
    }
  }

  // Function to animate the snowfall
  function animateSnowfall() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    for (const snowflake of snowflakes) {
      snowflake.update();
      snowflake.draw();
    }

    requestAnimationFrame(animateSnowfall);
  }

  // Create snowflakes when the website finishes loading
  // Create new fireworks burst more frequently
  if (Math.random() < 1) {
    createSnowflakes();
  }
  createSnowflakes();

  // Start the animation
  animateSnowfall();

  // Fade away after 5 seconds
  setTimeout(() => {
    canvas.style.transition = 'opacity 2s';
    canvas.style.opacity = '0';
  }, 10000);

  // Update canvas size on window resize
  window.addEventListener('resize', function () {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });

  // Follow the user on scroll
  window.addEventListener('scroll', function () {
    canvas.style.transform = `translateY(${window.scrollY}px)`;
  });
});


document.addEventListener('DOMContentLoaded', function () {
  const canvas = document.getElementById('fireworksCanvas');
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  function getRandom(min, max) {
    return Math.random() * (max - min) + min;
  }

  class Particle {
    constructor(x, y, color) {
      this.x = x;
      this.y = y;
      this.radius = getRandom(2, 4);
      this.color = color;
      this.alpha = 1;
      this.velocity = {
        x: getRandom(-1, 1),
        y: getRandom(-5, -2)
      };
    }

    update() {
      this.x += this.velocity.x;
      this.y += this.velocity.y;
      this.alpha -= 0.015;
    }

    draw() {
      ctx.globalAlpha = this.alpha;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
      ctx.fillStyle = this.color;
      ctx.fill();
      ctx.closePath();
      ctx.globalAlpha = 1;
    }
  }

  function createFireworks() {
    const launchX = getRandom(0.2 * canvas.width, 0.8 * canvas.width);
    const launchY = canvas.height;
    const explosionColor = `hsl(${getRandom(0, 360)}, 100%, 50%)`;

    for (let i = 0; i < 50; i++) {
      particles.push(new Particle(launchX, launchY, explosionColor));
    }
  }

  const particles = [];

  function animateFireworks() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    for (let i = 0; i < particles.length; i++) {
      particles[i].update();
      particles[i].draw();

      if (particles[i].alpha <= 0) {
        particles.splice(i, 1);
        i--;
      }
    }

    // Create new fireworks burst more frequently
    if (Math.random() < 0.05) {
      createFireworks();
    }

    requestAnimationFrame(animateFireworks);
  }

  animateFireworks();
  
  // Fade away after 5 seconds
  setTimeout(() => {
    canvas.style.transition = 'opacity 2s';
    canvas.style.opacity = '0';
  }, 10000);

  // Update canvas size on window resize
  window.addEventListener('resize', function () {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });

  // Follow the user on scroll
  window.addEventListener('scroll', function () {
    canvas.style.transform = `translateY(${window.scrollY}px)`;
  });
});

